---
layout: post
title: IOS中的单例模式
date  2015-08-02 00:00:00 +0700
categories: uncategorized
tags:
- IOS设计模式
---

## 单例模式介绍：

```

单例模式官方定义是：通过单例模式可以保证系统中一个类只有一个实例而且
该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望
在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。

```
举个好理解的例子来说明：

```

我们在开发的过程中，各个小模块之间需要一些共享的变量，而采用单例模式的类
往往起到了一个数据共享的一个桥梁，全局只能有它自己的一个实例，想用共享变量的
时候，直接从它身上拿就行啦（说的有点笼统，看个小例子就OK啦^_^）。

```

为了展示这个例子，一个简单的小工程（包含一下3个小文件）：

singleton.h

```

#import <Foundation/Foundation.h>

@interface singleton : NSObject

@property (retain,nonatomic) NSString *movieName;
@property (assign,nonatomic) int *leftTickets;
@property (assign,nonatomic) float ticketPrice;

+ (instancetype) shareInstance;

@end

```

singleton.m

```

#import "singleton.h"
static   singleton *shareObj=nil;     //单例的实现方式
@implementation singleton

+ (instancetype) shareInstance       //按照这个格式来声明和实现类方法
{
if (!shareObj) {                       //单例的实现方式
shareObj=[[singleton alloc] init];
shareObj.movieName=@"大圣归来！";
shareObj.leftTickets=100;
shareObj.ticketPrice=50.0;
}
return shareObj;
}
@end

```

main.m

```

#import <Foundation/Foundation.h>
#import "singleton.h"
int main(int argc, const char * argv[]) {
@autoreleasepool {
singleton *shareObj=[singleton shareInstance];

NSLog(@"电影名称：%@,电影票剩余量：%d,票价:%f",shareObj.movieName,shareObj.leftTickets,shareObj.ticketPrice);


    }
return 0;
}

```



运行结果为：

```

2015-08-02 20:21:47.684 oc-043[21187:824082] 电影名称：大圣归来！,电影票剩余量：100,票价:50.000000

```

看完上面的例子，大概应该对单例模式有些了解了，但是这样设计单例模式是由陷阱的。

试着思考几个问题：

```
1.如果有些不仔细的同学，他想用共享数据的时候，利用［［singleton allo］ init］来初始化singgleton类的话，
会出现什么情况？
2.如何避免

```
如果真如上面所提到的方法，就会出现有2个实例的情况（已经违背了单例模式的设计原则），这样的话，取得的数据是nil或者0.

```


`避免错误的原则：`

－ 如果要利用单例类，直接用自己定义的类方法＋（instancetype）shareInstance;
这样可以保证，最多就一个实例。
－ 第二个方法就是在设计的时候，就把单例模式给设计的很严谨，具体参考 [这片博客](http://www.cnblogs.com/lyanet/archive/2013/01/11/2856468.html)



好了，单例模式比较简单，就先总结到这里，下一篇应该是关于MVC设计模式的总结！keep moving！！
